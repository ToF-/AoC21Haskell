    describe "distance" $ do
        it "tell the distance between 2 points in space" $ do
            let p1 = point (2, 3, 1)
            let p2 = point (8,-5, 0)
            abs (distance p1 p2 - 10.05) < 0.01 `shouldBe` True 

    describe "signature" $ do
        it "tell the distance from a point to all other points in the scanner range" $ do
            let p1 = point (2,3,1)
            let pts = map point [(8,-5,0),(4,2,-10),(-3,7,18)]
            signature p1 pts `shouldBe` [100499,112250,181659]

    describe "report" $ do
        it "tell all the points and their signatures from a scanner" $ do
            let scanner0 = map point [(2,3,1),(8,-5,0),(4,2,-10),(-3,7,18)]
            let r0 = report scanner0
            r0 `shouldBe`
                [(Point {x = 2, y = 3, z = 1},[100499,112250,181659])
                ,(Point {x = 8, y = -5, z = 0},[100499,128452,242693])
                ,(Point {x = 4, y = 2, z = -10},[112250,128452,292916])
                ,(Point {x = -3, y = 7, z = 18},[181659,242693,292916])]

            let scanner1 = map point [(42,3,17),(22,-2,11),(28,0,10),(24,-3,0),(17,2,28),(19,-28,7)]
            let r1 = report scanner1
            r1 `shouldBe`
                [(Point {x = 42, y = 3, z = 17},[159374,214709,254755,273313,398748])
                ,(Point {x = 22, y = -2, z = 11},[64031,112250,181659,214709,264764])
                ,(Point {x = 28, y = 0, z = 10},[64031,111803,159374,211896,295635])
                ,(Point {x = 24, y = -3, z = 0},[111803,112250,254755,264386,292916])
                ,(Point {x = 17, y = 2, z = 28},[181659,211896,273313,292916,366742])
                ,(Point {x = 19, y = -28, z = 7},[264386,264764,295635,366742,398748])]      
    describe "commonPoints" $ do
        it "tell the points from two reports with a certain number of distances they have in common in their signature" $ do
            let scanner0 = map point [(17,-3,5),(2,3,1),(8,-5,0),(4,2,-10),(-3,7,18)]
            let scanner1 = map point [(42,3,17),(22,-2,11),(28,0,10),(24,-3,0),(17,2,28),(19,-28,7)]
            commonPoints scanner0 scanner1 2 `shouldBe` 
                [(Point {x = 2, y = 3, z = 1},Point {x = 22, y = -2, z = 11})
                ,(Point {x = 4, y = 2, z = -10},Point {x = 24, y = -3, z = 0})
                ,(Point {x = -3, y = 7, z = 18},Point {x = 17, y = 2, z = 28})]
        it "should pass the sample" $ do
            let scanner0 = map point (sampleScanners !! 0)
            let scanner1 = map point (sampleScanners !! 1)
            (commonPoints scanner0 scanner1 11) `shouldBe`
                [(Point {x = 404, y = -588, z = -901},Point {x = -336, y = 658, z = 858})
                ,(Point {x = 528, y = -643, z = 409},Point {x = -460, y = 603, z = -452})
                ,(Point {x = 390, y = -675, z = -793},Point {x = -322, y = 571, z = 750})
                ,(Point {x = -537, y = -823, z = -458},Point {x = 605, y = 423, z = 415})
                ,(Point {x = -485, y = -357, z = 347},Point {x = 553, y = 889, z = -390})
                ,(Point {x = -345, y = -311, z = 381},Point {x = 413, y = 935, z = -424})
                ,(Point {x = -661, y = -816, z = -575},Point {x = 729, y = 430, z = 532})
                ,(Point {x = -618, y = -824, z = -621},Point {x = 686, y = 422, z = 578})
                ,(Point {x = -447, y = -329, z = 318},Point {x = 515, y = 917, z = -361})
                ,(Point {x = 544, y = -627, z = -890},Point {x = -476, y = 619, z = 847})
                ,(Point {x = 423, y = -701, z = 434},Point {x = -355, y = 545, z = -477})
                ,(Point {x = 459, y = -707, z = 401},Point {x = -391, y = 539, z = -444})]   
    describe "rotate" $ do
        it "rotate a point" $ do
            let p = point (34, 2, 18)
            (p `rotate` (rotations !! 0))`shouldBe` point ( 34, 2, 18)
    describe "rotateCommonPoints" $ do
        it "rotate all the second points of a list of common points" $ do
            let scanner0 = map point (sampleScanners !! 0)
            let scanner1 = map point (sampleScanners !! 1)
            (rotateCommonPoints (commonPoints scanner0 scanner1 11) (rotations!!4)) `shouldBe`
                [(Point {x = 404, y = -588, z = -901},Point {x = 658, y = 336, z = 858})
                ,(Point {x = 528, y = -643, z = 409},Point {x = 603, y = 460, z = -452})
                ,(Point {x = 390, y = -675, z = -793},Point {x = 571, y = 322, z = 750})
                ,(Point {x = -537, y = -823, z = -458},Point {x = 423, y = -605, z = 415})
                ,(Point {x = -485, y = -357, z = 347},Point {x = 889, y = -553, z = -390})
                ,(Point {x = -345, y = -311, z = 381},Point {x = 935, y = -413, z = -424})
                ,(Point {x = -661, y = -816, z = -575},Point {x = 430, y = -729, z = 532})
                ,(Point {x = -618, y = -824, z = -621},Point {x = 422, y = -686, z = 578})
                ,(Point {x = -447, y = -329, z = 318},Point {x = 917, y = -515, z = -361})
                ,(Point {x = 544, y = -627, z = -890},Point {x = 619, y = 476, z = 847})
                ,(Point {x = 423, y = -701, z = 434},Point {x = 545, y = 355, z = -477})
                ,(Point {x = 459, y = -707, z = 401},Point {x = 539, y = 391, z = -444})]
    describe "translation" $ do
        it "tell the difference between two points coordinates relatively" $ do
            translation (point (404,-588,-901)) (point (658,336,858)) `shouldBe` (404-658,-588-336,-901-858) 

    describe "isHomogen" $ do
        it "tell if a rotation yields the same translation for all common points" $ do
                let cps = [(Point {x = 2, y = 3, z = 1},Point {x = 22, y = -2, z = 11})
                          ,(Point {x = 4, y = 2, z = -10},Point {x = 24, y = -3, z = 0})
                          ,(Point {x = -3, y = 7, z = 18},Point {x = 17, y = 2, z = 28})]
                isHomogen (cps, rotations!!0) `shouldBe` True 
                isHomogen (rotateCommonPoints cps (rotations!!4), rotations!!4) `shouldBe` False 

    describe "allRotations" $ do
        it "is the list of all possible rotations" $ do
            let p = point (42, 17, -23)
            let ps = map (rotate p) rotations
            ps `shouldBe` [Point {x = 42, y = 17, z = -23}
                          ,Point {x = 42, y = -23, z = -17}
                          ,Point {x = 42, y = -17, z = 23}
                          ,Point {x = 42, y = 23, z = 17}
                          ,Point {x = 17, y = -42, z = -23}
                          ,Point {x = 17, y = -23, z = 42}
                          ,Point {x = 17, y = 42, z = 23}
                          ,Point {x = 17, y = 23, z = -42}
                          ,Point {x = 42, y = -17, z = -23}
                          ,Point {x = -42, y = 23, z = -17}
                          ,Point {x = -42, y = 17, z = 23}
                          ,Point {x = -42, y = -23, z = 17}
                          ,Point {x = -17, y = 42, z = -23}
                          ,Point {x = -17, y = 23, z = 42}
                          ,Point {x = -17, y = -42, z = 23}
                          ,Point {x = -17, y = -23, z = -42}
                          ,Point {x = -23, y = 17, z = -42}
                          ,Point {x = -23, y = 42, z = 17}
                          ,Point {x = -23, y = -17, z = 42}
                          ,Point {x = -23, y = -42, z = -17}
                          ,Point {x = 23, y = -17, z = -42}
                          ,Point {x = 23, y = -42, z = 17}
                          ,Point {x = 23, y = 17, z = 42}
                          ,Point {x = 23, y = 42, z = -17}]

    describe "findHomogen" $ do
        it "find the first rotation to create an homogen translation of common points" $ do
            let scanner0 = map point (sampleScanners !! 0)
            let scanner1 = map point (sampleScanners !! 1)
            let scanner4 = map point (sampleScanners !! 4)
            let cps0_1 = sort $ commonPoints scanner0 scanner1 11
            let firstCommon0_1 = cps0_1 !! 1
            let fstc0_1 = fst firstCommon0_1
            let sndc0_1 = snd firstCommon0_1
            coords fstc0_1 `shouldBe` (-618,-824,-621)
            coords sndc0_1 `shouldBe` (686,422,578)
            let Just (t1,r1,l1) = findHomogen cps0_1
            t1 `shouldBe` (68,-1246,-43)
            r1 `shouldBe` [[-1,0,0],[0,1,0],[0,0,-1]]
            l1 `shouldBe` 12 
            translationT (coords fstc0_1) (coords (rotate sndc0_1 r1)) `shouldBe` (68,-1246,-43)
            ((flip translate t1).(flip rotate r1)) sndc0_1 `shouldBe` fstc0_1 

            let cps1_4 = commonPoints scanner1 scanner4 11
            let firstCommon1_4 = cps1_4 !! 1
            let fstc1_4 = fst firstCommon1_4
            let sndc1_4 = snd firstCommon1_4
            coords fstc1_4 `shouldBe` (-340,-569,-846)
            coords sndc1_4 `shouldBe` (-258,-428,682)
            let Just (t4,r4,l4) = findHomogen cps1_4
            t4 `shouldBe` (88,113,-1104)
            r4 `shouldBe` [[0,0,-1],[1,0,0],[0,-1,0]]
            l4 `shouldBe` 12 


            let cps1tr_4 = commonPoints (map ((flip translate t1) . (flip rotate r1)) scanner1) scanner4 11
            let firstCommon1tr_4 = cps1tr_4 !! 1
            let fstc1tr_4 = fst firstCommon1tr_4
            let sndc1tr_4 = snd firstCommon1tr_4
            coords fstc1tr_4 `shouldBe` (408,-1815,803)
            coords sndc1tr_4 `shouldBe` (-258,-428,682)
            let Just (t14,r14,l14) = findHomogen cps1tr_4
            t14 `shouldBe` (-20,-1133,1061)
            r14 `shouldBe` [[0,0,1],[-1,0,0],[0,-1,0]]
            l14 `shouldBe` 12 

    describe "findPosition" $ do
        it "find the position and rotation of a scanner from a scanner" $ do
            sample <- (readScanners . lines) <$> readFile "test/Sample19Data.txt"
            findPosition sample 0 0  `shouldBe` Just (Position {from = 0, to = 0, tr = (0,0,0), rot = [[1,0,0],[0,1,0],[0,0,1]], len = 25})
    describe "findAllPositions" $ do
        it "find all the relative positions of scanners" $ do
            sample <- (readScanners . lines) <$> readFile "test/Sample19Data.txt"
            findAllPositions sample `shouldBe`
                [Position {from = 0, to = 1, tr = (68,-1246,-43), rot = [[-1,0,0],[0,1,0],[0,0,-1]], len = 12}
                ,Position {from = 1, to = 0, tr = (68,1246,-43), rot = [[-1,0,0],[0,1,0],[0,0,-1]], len = 12}
                ,Position {from = 1, to = 3, tr = (160,-1134,-23), rot = [[1,0,0],[0,1,0],[0,0,1]], len = 12}
                ,Position {from = 1, to = 4, tr = (88,113,-1104), rot = [[0,0,-1],[1,0,0],[0,-1,0]], len = 12}
                ,Position {from = 2, to = 4, tr = (1125,-168,72), rot = [[0,1,0],[1,0,0],[0,0,-1]], len = 12}
                ,Position {from = 3, to = 1, tr = (-160,1134,23), rot = [[1,0,0],[0,1,0],[0,0,1]], len = 12}
                ,Position {from = 4, to = 1, tr = (-1104,-88,113), rot = [[0,1,0],[0,0,-1],[-1,0,0]], len = 12}
                ,Position {from = 4, to = 2, tr = (168,-1125,72), rot = [[0,1,0],[1,0,0],[0,0,-1]], len = 12}]
    describe "convert" $ do
        it "given a scanner B position relative to a scanner A, convert a point from B to A" $ do 
            sample <- (readScanners . lines) <$> readFile "test/Sample19Data.txt"
            let poss = findAllPositions sample 
            let (Just pos1) = find (\p -> from p == 0 && to p == 1) poss
            let (Just pos4) = find (\p -> from p == 1 && to p == 4) poss
            let pt0 = point (-618,-824,-621)
            let pt00= point (459,-707,401)
            let pt1 = point (686,422,578)
            let pt4 = point (-660,-479,-426)
            (convert pos1 pt1) `shouldBe` pt0 
            (convert pos1 (convert pos4 pt4)) `shouldBe` pt00 
    describe "acquire" $ do
        it "given a position, convert all the point from target scanner to origin scanner" $ do
            sample <- (readScanners . lines) <$> readFile "test/Sample19Data.txt"
            let [p01,p10,p13,p14,p24,p31,p41,p42] = findAllPositions sample
            length (sample!!0) `shouldBe` 25
            length (sample!!1) `shouldBe` 25
            length (commonPoints (sample!!0) (sample!!1) 11) `shouldBe` 12 
            let sample' = acquire sample p01
            length (sample'!!0) `shouldBe` 25 + 25 - 12

    describe "acquire all" $ do
        it "acquire convert for all positions until scanner 0 acquire no more points" $ do
            sample <- (readScanners . lines) <$> readFile "test/Sample19Data.txt"
            let sample' = acquireAll sample 
            let l x = length (sample !! x)
            map length sample `shouldBe` [25,25,26,25,26] 
            
            map length sample' `shouldBe` 
                [l 0 + l 1 - 12
                ,l 1 + l 0 - 12 + l 3 - 12 + l 4 - 12
                ,0,0,0]

            

    describe "readScanners" $ do
        it "convert lines into a list of scanners" $ do 
            let input = ["--- scanner 0 ---"
                        ,""
                        ,"404,-588,-901"
                        ,"528,-643,409"
                        ,"-838,591,734"
                        ,""
                        ,"--- scanner 1 ---"
                        ,""
                        ,"553,345,-567"
                        ,"474,580,667"
                        ,"-447,-329,318"]
            let scs = readScanners input
            length scs  `shouldBe` 2 
            head (head scs) `shouldBe` point (404,-588,-901)  
            last (last scs) `shouldBe` point (-447,-329,318)

        it "should read the puzzle data" $ do
            content <- lines <$> readFile "test/Puzzle19Data.txt"
            let puzzle = readScanners content
            length puzzle `shouldBe` 34 
            head (head puzzle) `shouldBe` point (562,-830,765) 
            last (last puzzle) `shouldBe` point (682,-518,447) 
        
[Position {from = 0, to = 1, tr = (68,-1246,-43), rot = [[-1,0,0],[0,1,0],[0,0,-1]], len = 12}
,Position {from = 1, to = 0, tr = (68,1246,-43), rot = [[-1,0,0],[0,1,0],[0,0,-1]], len = 12}
,Position {from = 1, to = 3, tr = (160,-1134,-23), rot = [[1,0,0],[0,1,0],[0,0,1]], len = 12}
,Position {from = 1, to = 4, tr = (88,113,-1104), rot = [[0,0,-1],[1,0,0],[0,-1,0]], len = 12}
,Position {from = 2, to = 4, tr = (1125,-168,72), rot = [[0,1,0],[1,0,0],[0,0,-1]], len = 12}
,Position {from = 3, to = 1, tr = (-160,1134,23), rot = [[1,0,0],[0,1,0],[0,0,1]], len = 12}
,Position {from = 4, to = 1, tr = (-1104,-88,113), rot = [[0,1,0],[0,0,-1],[-1,0,0]], len = 12}
,Position {from = 4, to = 2, tr = (168,-1125,72), rot = [[0,1,0],[1,0,0],[0,0,-1]], len = 12}]

---

type Signature = [Integer]
type Scanner = [Point]
type Coords = (Integer,Integer,Integer)
type Length = Int

data Point = Point { x :: Integer, y :: Integer, z :: Integer }
    deriving (Eq,Show,Ord)

type Rotation = [[Integer]]

data Position = Position { from :: Int
                         , to :: Int
                         , tr :: Coords
                         , rot :: Rotation
                         , len :: Length }
    deriving (Eq,Show,Ord)

point :: Coords -> Point
point (a,b,c) = Point { x = a, y = b, z = c }

coords :: Point -> Coords
coords (Point a b c) = (a,b,c)

sq :: Integer -> Integer
sq a = a * a

distance :: Point -> Point -> Double 
distance p1 p2 = sqrt ( dx2 + dy2 + dz2 )
    where
        dx2 = fromIntegral (square ( x p2 - x p1 ))
        dy2 = fromIntegral (square ( y p2 - y p1 ))
        dz2 = fromIntegral (square ( z p2 - z p1 ))
        square a = a * a

signature :: Point -> [Point] -> [Integer]
signature pt = filter (>0) . sort . map (\p -> round ((pt `distance` p) * 10000)) 

report :: Scanner -> [(Point,Signature)]
report pts = map (\p -> (p, signature p pts)) pts

commonPoints :: Scanner -> Scanner -> Int -> [(Point,Point)]
commonPoints ps qs n = map (\(p,q,_) -> (p,q)) $ filter (\(_,_,s) -> length s >= n) $ [(p,q,common sp sq) | (p,sp) <- report ps, (q,sq) <- report qs]
    where
        common :: Signature -> Signature -> Signature
        common s t = filter (\d -> d `elem` t) s

commonPoints' :: Scanner -> Scanner -> [(Point,Point)]
commonPoints' ps qs = map (\(p,q,_) -> (p,q)) $ filter (\(_,_,s) -> length s > 5) $ [(p,q,common sp sq) | (p,sp) <- report ps, (q,sq) <- report qs]
    where
        common :: Signature -> Signature -> Signature
        common s t = filter (\d -> d `elem` t) s

translation :: Point -> Point -> (Integer, Integer, Integer)
translation (Point a b c) (Point d e f) = (a-d,b-e,c-f)

translate :: Point -> Coords -> Point
translate (Point a b c) (d,e,f) = Point (a+d) (b+e) (c+f)

translate' = flip translate
rotate' = flip rotate

translateT :: Coords -> Coords -> Coords
translateT (a,b,c) (d,e,f) = (a+d,b+e,c+e)

translationT :: (Integer, Integer, Integer) -> (Integer, Integer, Integer) -> (Integer, Integer, Integer)
translationT (a,b,c) (d,e,f) = (a-d,b-e,c-f)

rotate :: Point -> Rotation -> Point
rotate (Point a b c) [[d,e,f],[g,h,i],[j,k,l]] = Point m n o
    where
        m = a * d + b * g + c * j
        n = a * e + b * h + c * k
        o = a * f + b * i + c * l 

rotateT :: Coords -> Rotation -> Coords
rotateT (a,b,c) [[d,e,f],[g,h,i],[j,k,l]] = (m,n,o)
    where
        m = a * d + b * g + c * j
        n = a * e + b * h + c * k
        o = a * f + b * i + c * l 
rotations = [[[ 1, 0, 0]
             ,[ 0, 1, 0]
             ,[ 0, 0, 1]]

            ,[[ 1, 0, 0]
             ,[ 0, 0,-1]
             ,[ 0, 1, 0]]

            ,[[ 1, 0, 0]
             ,[ 0,-1, 0]
             ,[ 0, 0,-1]]

            ,[[ 1, 0, 0]
             ,[ 0, 0, 1]
             ,[ 0,-1, 0]]

            ,[[ 0,-1, 0]
             ,[ 1, 0, 0]
             ,[ 0, 0, 1]]

            ,[[ 0, 0, 1]
             ,[ 1, 0, 0]
             ,[ 0, 1, 0]]

            ,[[ 0, 1, 0]
             ,[ 1, 0, 0]
             ,[ 0, 0,-1]]

            ,[[ 0, 0,-1]
             ,[ 1, 0, 0]
             ,[ 0,-1, 0]]

            ,[[ 1, 0, 0]
             ,[ 0,-1, 0]
             ,[ 0, 0, 1]]

            ,[[-1, 0, 0]
             ,[ 0, 0,-1]
             ,[ 0,-1, 0]]

            ,[[-1, 0, 0]
             ,[ 0, 1, 0]
             ,[ 0, 0,-1]]

            ,[[-1, 0, 0]
             ,[ 0, 0, 1]
             ,[ 0, 1, 0]]

            ,[[ 0, 1, 0]
             ,[-1, 0, 0]
             ,[ 0, 0, 1]]

            ,[[ 0, 0, 1]
             ,[-1, 0, 0]
             ,[ 0,-1, 0]]

            ,[[ 0,-1, 0]
             ,[-1, 0, 0]
             ,[ 0, 0,-1]]

            ,[[ 0, 0,-1]
             ,[-1, 0, 0]
             ,[ 0, 1, 0]]

            ,[[ 0, 0,-1]
             ,[ 0, 1, 0]
             ,[ 1, 0, 0]]

            ,[[ 0, 1, 0]
             ,[ 0, 0, 1]
             ,[ 1, 0, 0]]

            ,[[ 0, 0, 1]
             ,[ 0,-1, 0]
             ,[ 1, 0, 0]]

            ,[[ 0,-1, 0]
             ,[ 0, 0,-1]
             ,[ 1, 0, 0]]

            ,[[ 0, 0,-1]
             ,[ 0,-1, 0]
             ,[-1, 0, 0]]

            ,[[ 0,-1, 0]
             ,[ 0, 0, 1]
             ,[-1, 0, 0]]

            ,[[ 0, 0, 1]
             ,[ 0, 1, 0]
             ,[-1, 0, 0]]

            ,[[ 0, 1, 0]
             ,[ 0, 0,-1]
             ,[-1, 0, 0]]]



rotateCommonPoints :: [(Point,Point)] -> Rotation -> [(Point,Point)]
rotateCommonPoints cps r = map (\(p,q) -> (p,rotate q r)) cps

isHomogen :: ([(Point,Point)],Rotation) -> Bool
isHomogen = (1==) . length . group . sort . map (uncurry translation) . fst

findHomogen :: [(Point, Point)] -> Maybe (Coords,Rotation,Length)
findHomogen cps = result <$> find isHomogen allRotatedCommonPoints
    where 
        allRotatedCommonPoints = map (\r -> (rotateCommonPoints cps r,r)) rotations
        result :: ([(Point,Point)],Rotation) -> (Coords, Rotation, Length)
        result (cps,r) = (uncurry translation (head cps),r,length cps)

findPosition :: [Scanner] -> Int -> Int -> Maybe Position
findPosition scs a b = result <$> findHomogen (commonPoints (scs!!a) (scs!!b) 11)
    where
        result (t,r,l) = Position { from = a, to = b, tr = t, rot = r, len=l }

findAllPositions :: [Scanner] -> [Position]
findAllPositions scs = catMaybes $ [findPosition scs a b | a <- [0..n], b <- [0..n], a /= b]
    where n = length scs - 1

readScanners :: [String] -> [Scanner]
readScanners = map (map toPoint) . scannerGroups
    where toPoint s = point (read ("("<>s<>")"))

scannerGroups :: [String] -> [[String]]
scannerGroups = filter (isCoord . head) . groupBy (\s t -> isCoord s == isCoord t)  
    where  isCoord s = ',' `elem` s

multiply :: Rotation -> Rotation -> Rotation
multiply [[a11,a12,a13],[a21,a22,a23],[a31,a32,a33]] [[b11,b12,b13],[b21,b22,b23],[b31,b32,b33]] =
    [[(a11 * b11) + (a12 * b21) + (a13 * b31),(a11 * b12) + (a12 * b22) + (a13 * b32),(a11 * b13) + (a12 * b23) + (a13 * b33)]
    ,[(a21 * b11) + (a22 * b21) + (a23 * b31),(a21 * b12) + (a22 * b22) + (a23 * b32),(a21 * b13) + (a22 * b23) + (a23 * b33)]
    ,[(a31 * b11) + (a32 * b21) + (a33 * b31),(a31 * b12) + (a32 * b22) + (a33 * b32),(a31 * b13) + (a32 * b23) + (a33 * b33)]]

convert :: Position -> Point -> Point 
convert (Position _ _ t r _) = (translate' t) . (rotate' r)

acquire :: [Scanner] -> Position -> [Scanner]
acquire scs p@(Position o s t r _) = replace scs o pts
    where
        pts = nub (sort (scs!!0 <> map (convert p) (scs!!s)))

acquireAll :: [Scanner] -> [Scanner]
acquireAll scs = foldl acquire scs (findAllPositions scs)

replace [] _ _ = [] 
replace (_:xs) 0 x = (x:xs)
replace (x:xs) n t = x : replace xs (n-1) t
---
[(-892,524,684)
(-876,649,763)
(-838,591,734)
(-789,900,-551)
(-739,-1745,668)
(-689,845,-530)
(-687,-1600,576)
(-661,-816,-575)
(-661,-816,-575)
(-635,-1737,486)
(-618,-824,-621)
(-618,-824,-621)
(-601,-1648,-643)
(-584,868,-557)
(-537,-823,-458)
(-537,-823,-458)
(-518,-1681,-600)
(-499,-1607,-770)
(-485,-357,347)
(-485,-357,347)
(-447,-329,318)
(-447,-329,318)
(-345,-311,381)
(-345,-311,381)
(-27,-1108,-65)
(7,-33,-71)
(390,-675,-793)
(390,-675,-793)
(396,-1931,-563)
(404,-588,-901)
(404,-588,-901)
(408,-1815,803)
(423,-701,434)
(423,-701,434)
(432,-2009,850)
(443,580,662)
(455,729,728)
(459,-707,401)
(459,-707,401)
(474,580,667)
(497,-1838,-617)
(528,-643,409)
(528,-643,409)
(534,-1912,768)
(544,-627,-890)
(544,-627,-890)
(553,345,-567)
(564,392,-477)
(568,-2007,-577)
(630,319,-379)]
---
[Point {x = -892, y = 524, z = 684, distances = fromList [0,9905,22122,1055379,1059590,1088243,1618046,1677210,1688475,1753281,1785845,1858370,1869381,3244598,3292350,3420651,3434042,3453914,3485281,3488478,3595205,3685067,5262654,5428385,5864373]}
,Point {x = -876, y = 649, z = 763, distances = fromList
[0,5649,22122,1337973,1338550,1349485,1745234,1754723,1779186,1797166,1836477,1875625,1940369,3618142,3677249,3681100,3752005,3765796,3772546,3903357,3982694,4151749,5776868,5937465,6376985]}
,Point {x = -838, y = 591, z = 734, distances = fromList [0,5649,9905,1172337,1173082,1181262,1646266,1684413,1690929,1725954,1749107,1751426,1807926,3349385,3467777,3471726,3477902,3494337,3510861,3687998,3724459,3886650,5442469,5605830,6030824]}
,Point {x = -789, y = 900, z = -551, distances = fromList
[0,13466,43085,1677210,1734505,1749107,1797166,2094149,2109245,2380706,2382566,2478869,2532281,2961616,3006317,3040882,3091593,3181093,3212618,3759893,3929230,4223539,5002370,5036938,5046257]}
,Point {x = -739, y = -1745, z = 668, distances = fromList [0,32193,44004,1338734,1450002,1474061,1658418,1660761,1747174,2094101,2144488,2158764,2212820,2293961,2414174,2494936,2524403,2583937,2838182,2886774,3187570,3326918,4554062,5106859,5323377]}
,Point {x = -689, y = 845, z = -530, distances = fromList
[0,12283,13466,1465981,1618046,1684413,1745234,1778027,1793933,2039238,2155944,2255549,2284593,2761730,2772513,2798883,2810512,2855603,2904756,3385779,3543810,3816673,4555956,4576954,4593369]}
,Point {x = -687, y = -1600, z = 576, distances = fromList [0,29573,32193,1088545,1296779,1418098,1494518,1495661,1625049,1638294,1695385,1739605,1816510,1847109,1940133,2039746,2060465,2141390,2419963,2579771,2881749,3070083,3889715,4395954,4611246]}
,Point {x = -661, y = -816, z = -575, distances =
fromList [0,4029,29114,689950,700448,747320,769299,1080414,1091741,1172006,1268817,1292485,1586971,1940133,1974638,2206362,2218857,2360618,2387212,2411906,2414174,2928926,4039646,4432890,4648523]}
,Point {x = -661, y = -816, z = -575, distances = fromList [0,4029,29114,1080414,1091741,1172006,1268817,1292485,1313329,1586971,2206362,2218857,2411906,2761730,2821781,2842109,2961616,2969493,2993322,3434042,3724459,3982694,4697801,4779605,5330290]}
,Point {x = -635, y = -1737, z = 486, distances =
fromList [0,29573,44004,1068906,1194422,1196221,1283718,1344969,1476710,1612932,1736136,1946221,1974638,2046032,2059307,2128601,2195364,2200998,2264961,2508234,2555334,2650078,3814310,4323491,4515517]}
,Point {x = -618, y = -824, z = -621, distances = fromList [0,4029,33131,649451,679749,739073,744890,1067849,1155987,1172802,1178580,1341702,1461414,2039746,2059307,2211835,2218102,2257009,2271437,2406977,2524403,2808021,4062533,4440169,4670566]}
,Point {x = -618, y = -824, z = -621, distances =
fromList [0,4029,33131,1067849,1155987,1172802,1178580,1318806,1341702,1461414,2211835,2218102,2406977,2740718,2798883,2868116,2896516,2922517,3006317,3595205,3886650,4151749,4743026,4822624,5382939]}
,Point {x = -601, y = -1648, z = -643, distances = fromList [0,9827,28214,679749,700448,718946,955160,1080498,1242380,1283718,1495661,1499798,1747174,1951310,2200189,2414475,2660237,2686998,2901681,3099017,3105314,3136886,3348842,3391370,3426459]}
,Point {x = -584, y = 868, z = -557, distances =
fromList [0,12283,43085,1397278,1550880,1566398,1753281,1806881,1807926,1875625,2217203,2327006,2327642,2623634,2700484,2750067,2842109,2868116,2871491,3214416,3385221,3618298,4452821,4457891,4486238]}
,Point {x = -537, y = -823, z = -458, distances = fromList [0,29114,33131,495774,713444,718946,756689,854312,867885,993458,1002929,1136955,1393601,1695385,1732148,1736136,1743353,1918314,2109178,2124662,2158764,2637042,3467210,3836038,4056421]}
,Point {x = -537, y = -823, z = -458, distances =
fromList [0,29114,33131,854312,867885,993458,1002929,1069805,1136955,1393601,1732148,1743353,1918314,2564205,2672294,2688787,2810512,2871491,3040882,3244598,3510861,3772546,4183209,4256155,4799364]}
,Point {x = -518, y = -1681, z = -600, distances = fromList [0,9827,34737,744890,756689,769299,855635,899265,1055163,1196221,1286201,1418098,1660761,1873749,2135334,2322860,2650874,2675669,2843841,2869190,2905206,2915037,3031489,3112584,3189641]}
,Point {x = -499, y = -1607, z = -770, distances =
fromList [0,28214,34737,649451,689950,713444,948850,968810,1068786,1335738,1612932,1659474,1847109,1870931,2062649,2144488,2810385,2819732,3028133,3099005,3120536,3340242,3374066,3525558,3652765]}
,Point {x = -485, y = -357, z = 347, distances = fromList [0,3069,22872,521764,867885,950369,1016552,1055379,1091741,1111809,1172802,1173082,1337973,1838378,1900050,2166349,2208157,2227277,2255549,2327642,2340378,2401186,2405644,2478869,2661910]}
,Point {x = -485, y = -357, z = 347, distances = fromList
[0,3069,22872,867885,943509,950369,1016552,1091741,1111809,1172802,1638294,1946221,2094101,2166349,2401186,2650874,2660237,2661910,2810385,3131149,3633627,3823002,4081737,4086981,4685085]}
,Point {x = -447, y = -329, z = 318, distances = fromList [0,3069,14697,445053,854312,908740,970609,1057502,1059590,1080414,1155987,1172337,1338550,1736717,1796323,2054606,2065642,2101068,2155944,2173987,2217203,2237501,2277243,2382566,2530149]}
,Point {x = -447, y = -329, z = 318, distances = fromList
[0,3069,14697,854312,908740,929930,970609,1057502,1080414,1155987,1739605,2046032,2054606,2212820,2277243,2530149,2675669,2686998,2819732,3174446,3670750,3878065,4042442,4053214,4646934]}
,Point {x = -345, y = -311, z = 381, distances = fromList [0,14697,22872,405492,744733,803632,873137,1002929,1088243,1181262,1268817,1341702,1349485,1493786,1546438,1842009,1925125,2050997,2056654,2135444,2281254,2284593,2327006,2505618,2532281]}
,Point {x = -345, y = -311, z = 381, distances = fromList
[0,14697,22872,744733,803632,873137,935249,1002929,1268817,1341702,1816510,2050997,2128601,2281254,2293961,2505618,2869190,2901681,3007109,3028133,3485611,3706894,4036697,4064617,4627749]}
,Point {x = -27, y = -1108, z = -65, distances = fromList [0,495774,614153,617150,739073,747320,748926,855635,891362,929930,935249,943509,955160,968810,1068906,1088545,1104262,1112180,1155057,1238027,1424370,1442498,1450002,1655026,1859707]}
,Point {x = 7, y = -33, z = -71, distances = fromList
[0,405492,445053,521764,606897,655710,687016,873941,874305,881364,1069805,1080137,1103154,1138502,1154534,1311966,1313329,1318806,1397278,1419749,1465981,1688475,1734505,1751426,1940369]}
,Point {x = 390, y = -675, z = -793, distances = fromList [0,19429,35429,891362,993458,1067849,1172006,1394994,1431421,1464872,1507294,1630472,1659474,1852564,1873749,1951310,2050997,2054606,2166349,3814310,3847140,3889715,3987626,4480769,4554062]}
,Point {x = 390, y = -675, z = -793, distances = fromList
[0,19429,35429,993458,1067849,1080137,1118045,1172006,1217032,1268621,1431421,1464872,1507294,2050997,2054606,2166349,3385221,3543810,3694859,3713681,3929230,4288882,5262654,5442469,5776868]}
,Point {x = 396, y = -1931, z = -563, distances = fromList [0,21766,35556,899265,948850,1080498,1104262,1630472,1790966,1829249,1879556,1917957,2003949,2109178,2200998,2257009,2360618,2431441,2507638,2579771,2621152,2838182,4053214,4064617,4081737]}
,Point {x = 404, y = -588, z = -901, distances = fromList
[0,19429,21242,1004246,1136955,1146209,1154534,1165776,1178580,1292485,1712390,1734501,1795355,2277243,2281254,2401186,3214416,3385779,3759893,3808714,3827748,4390731,5428385,5605830,5937465]}
,Point {x = 404, y = -588, z = -901, distances = fromList [0,19429,21242,1136955,1155057,1178580,1292485,1651805,1712390,1734501,1795355,1870931,1917957,2135334,2145433,2200189,2277243,2281254,2401186,4323491,4395954,4409161,4555437,5086026,5106859]}
,Point {x = 408, y = -1815, z = 803, distances = fromList
[0,26510,40421,1194422,1296779,1338734,1377382,1391869,1442498,1543220,1879556,1966864,2024850,2843841,3007109,3131149,3136886,3174446,3340242,3467210,3847140,4039646,4062533,4296089,4409161]}
,Point {x = 423, y = -701, z = 434, distances = fromList [0,2421,15014,617150,744733,908740,950369,1377382,1507294,1590398,1732148,1773093,1795355,1884001,2060465,2195364,2206362,2211835,2402846,2494936,2507638,2748782,2915037,3105314,3120536]}
,Point {x = 423, y = -701, z = 434, distances = fromList
[0,2421,15014,744733,874305,908740,950369,1507294,1693345,1697851,1732148,1744218,1773093,1795355,2044451,2113017,2132360,2206362,2211835,3292350,3349385,3618142,4457891,4555956,5002370]}
,Point {x = 432, y = -2009, z = 850, distances = fromList [0,26537,40421,1344969,1474061,1494518,1859707,1884001,1897534,2003949,2054829,2069653,2185555,3112584,3426459,3652765,3706894,3823002,3878065,4056421,4480769,4648523,4670566,4950068,5086026]}
,Point {x = 443, y = 580, z = 662, distances = fromList
[0,986,26701,1103154,1186771,1347306,1493786,1566963,1577766,1646266,1693345,1724746,1736717,1754723,1785845,1838378,2623634,2772513,3091593,3694859,3808714,3875754,4183209,4697801,4743026]}
,Point {x = 455, y = 729, z = 728, distances = fromList [0,26283,26701,1419749,1424174,1577475,1690929,1779186,1834085,1842009,1858370,1989474,2101068,2132360,2169041,2208157,2750067,2904756,3212618,4288882,4390731,4464581,4799364,5330290,5382939]}
,Point {x = 459, y = -707, z = 401, distances = fromList
[0,2421,8921,614153,803632,970609,1016552,1391869,1431421,1592339,1680306,1712390,1743353,1897534,2141390,2218102,2218857,2264961,2316929,2431441,2583937,2658365,2905206,3099005,3099017]}
,Point {x = 459, y = -707, z = 401, distances = fromList [0,2421,8921,803632,881364,970609,1016552,1431421,1680306,1690317,1712390,1724746,1727350,1743353,1989710,2052564,2169041,2218102,2218857,3420651,3477902,3752005,4486238,4593369,5046257]}
,Point {x = 474, y = 580, z = 667, distances = fromList
[0,986,26283,1138502,1186573,1352180,1546438,1565209,1584222,1697851,1725954,1727350,1796323,1836477,1869381,1900050,2700484,2855603,3181093,3713681,3827748,3885998,4256155,4779605,4822624]}
,Point {x = 497, y = -1838, z = -617, distances = fromList [0,21766,35202,1055163,1068786,1112180,1242380,1394994,1543259,1651805,1925070,2024850,2124662,2185555,2271437,2316929,2387212,2402846,2481662,2508234,2881749,3187570,4036697,4042442,4086981]}
,Point {x = 528, y = -643, z = 409, distances = fromList
[0,8921,15014,748926,873137,1057502,1111809,1464872,1543220,1687913,1734501,1739278,1918314,2069653,2406977,2411906,2419963,2481662,2555334,2621152,2834292,2886774,3189641,3374066,3391370]}
,Point {x = 528, y = -643, z = 409, distances = fromList [0,8921,15014,873137,873941,1057502,1111809,1464872,1556792,1565209,1566963,1687913,1734501,1857517,1918314,1929345,1989474,2406977,2411906,3453914,3494337,3765796,4452821,4576954,5036938]}
,Point {x = 534, y = -1912, z = 768, distances = fromList
[0,26510,26537,1476710,1590398,1592339,1625049,1655026,1658418,1739278,1790966,1819206,1925070,3031489,3348842,3485611,3525558,3633627,3670750,3836038,3987626,4400289,4432890,4440169,4555437]}
,Point {x = 544, y = -627, z = -890, distances = fromList [0,21242,35429,1049194,1163433,1209330,1311966,1393601,1461414,1586971,1680306,1687913,1773093,2505618,2530149,2661910,3618298,3816673,3875754,3885998,4223539,4464581,5864373,6030824,6376985]}
,Point {x = 544, y = -627, z = -890, distances = fromList
[0,21242,35429,1238027,1393601,1461414,1543259,1586971,1680306,1687913,1773093,1829249,2002945,2062649,2322860,2414475,2505618,2530149,2661910,4296089,4400289,4515517,4611246,4950068,5323377]}
,Point {x = 553, y = 345, z = -567, distances = fromList [0,10430,41949,687016,1004246,1049194,1118045,1566398,1577766,1584222,1793933,1834085,1929345,2052564,2109245,2113017,2135444,2237501,2405644,2564205,2740718,2821781,3685067,3687998,3903357]}
,Point {x = 564, y = 392, z = -477, distances = fromList
[0,10430,19289,655710,1165776,1209330,1268621,1347306,1352180,1550880,1577475,1778027,1857517,1989710,2044451,2056654,2094149,2173987,2340378,2688787,2896516,2969493,3471726,3485281,3677249]}
,Point {x = 568, y = -2007, z = -577, distances = fromList [0,35202,35556,1286201,1335738,1424370,1499798,1819206,1852564,1966864,2002945,2054829,2145433,2637042,2650078,2658365,2748782,2808021,2834292,2928926,3070083,3326918,4627749,4646934,4685085]}
,Point {x = 630, y = 319, z = -379, distances = fromList
[0,19289,41949,606897,1146209,1163433,1186573,1186771,1217032,1424174,1556792,1690317,1744218,1806881,1925125,2039238,2065642,2227277,2380706,2672294,2922517,2993322,3467777,3488478,3681100]}]
