module P19Spec
    where

import Test.Hspec
import P19
import Sample19Data 
import Data.List 

spec :: SpecWith ()
spec = do
    describe "distance" $ do
        it "is determined by two points positions" $ do
            let p1 = point (2, 3, 1)
            let p2 = point (8,-5, 0)
            distance p1 p2 `shouldBe` 101 

    describe "scan" $ do
        it "tell the distances from a point to every other point in a scanner range" $ do
            let scanner = scan [(2,3,1), (8,-5,0),(4,2,-10)]
            scanner `shouldBe`
                [Point {x = 2, y = 3, z = 1, distances = [0,101,126]}
                ,Point {x = 8, y = -5, z = 0, distances = [0,101,165]}
                ,Point {x = 4, y = 2, z = -10, distances = [0,126,165]}]

    describe "readScanners" $ do
        it "read scanners from a file" $ do
            sample <- (readScanners . lines) <$> readFile "test/Sample19Data.txt"
            head (head sample) `shouldBe` 
                Point {x = 404, y = -588, z = -901, distances = [0,19429,21242,1004246,1136955,1146209,1154534,1165776,1178580,1292485,1712390,1734501,1795355,2277243,2281254,2401186,3214416,3385779,3759893,3808714,3827748,4390731,5428385,5605830,5937465]}
            last (last sample) `shouldBe` 
                Point {x = 30, y = -46, z = -14, distances = [0,37469,577669,670424,713284,763982,800379,833333,943704,991242,1004955,1015017,1091606,1125425,1156030,1177106,1184870,1211276,1224629,1277230,1294605,1311389,1313990,1374678,1395301,1445358]}

    describe "rotations" $ do
        it "tell all rotations for a coord" $ do
            let (x,y,z) = (10,20,30)
            rotations (x,y,z) `shouldBe`
                [(x,y,z),(x,z,-y),(x,-y,-z),(x,-z,y),(y,-x,z),(y,z,x),(y,x,-z),(y,-z,-x),(x,-y,z),(-x,-z,-y),(-x,y,-z),(-x,z,y),(-y,x,z),(-y,-z,x),(-y,-x,-z),(-y,z,-x),(z,y,-x),(z,x,y),(z,-y,x),(z,-x,-y),(-z,-y,-x),(-z,-x,y),(-z,y,x),(-z,x,-y)]

    describe "intersection" $ do
        it "tell coords of points that are common between two scanners" $ do
            sample <- (readScanners . lines) <$> readFile "test/Sample19Data.txt"
            ((sample!!0) `intersection` (sample!!1)) `shouldBe`
                [((404,-588,-901),(-336,658,858)),((528,-643,409),(-460,603,-452)),((390,-675,-793),(-322,571,750)),((-537,-823,-458),(605,423,415)),((-485,-357,347),(553,889,-390)),((-345,-311,381),(413,935,-424)),((-661,-816,-575),(729,430,532)),((-618,-824,-621),(686,422,578)),((-447,-329,318),(515,917,-361)),((544,-627,-890),(-476,619,847)),((423,-701,434),(-355,545,-477)),((459,-707,401),(-391,539,-444))]

    describe "find position" $ do
        it "tell the translation and rotation from one systems of coords to another" $ do
            sample <- (readScanners . lines) <$> readFile "test/Sample19Data.txt"
            findPosition (sample!!0) (sample!!1)  `shouldBe` Just ((68,-1246,-43),[[-1,0,0],[0,1,0],[0,0,-1]]) 
            (translate (68,-1246,-43) (rotate [[-1,0,0],[0,1,0],[0,0,-1]] (-336,658,858))) `shouldBe` (404,-588,-901) 
        it "is nothing when one system has no common point to the other system" $ do
            sample <- (readScanners . lines) <$> readFile "test/Sample19Data.txt"
            findPosition (sample!!0) (sample!!2) `shouldBe` Nothing 

    describe "findPositions" $ do
        it "tell the translation and rotation from each scanner to every scanner" $ do
            sample <- (readScanners . lines) <$> readFile "test/Sample19Data.txt"
            findPositions sample `shouldBe` 
                [((0,1),((68,-1246,-43),[[-1,0,0],[0,1,0],[0,0,-1]]))
                ,((1,0),((68,1246,-43),[[-1,0,0],[0,1,0],[0,0,-1]]))
                ,((1,3),((160,-1134,-23),[[1,0,0],[0,1,0],[0,0,1]]))
                ,((1,4),((88,113,-1104),[[0,0,-1],[1,0,0],[0,-1,0]]))
                ,((2,4),((1125,-168,72),[[0,1,0],[1,0,0],[0,0,-1]]))
                ,((3,1),((-160,1134,23),[[1,0,0],[0,1,0],[0,0,1]]))
                ,((4,1),((-1104,-88,113),[[0,1,0],[0,0,-1],[-1,0,0]]))
                ,((4,2),((168,-1125,72),[[0,1,0],[1,0,0],[0,0,-1]]))]
            puzzle <- (readScanners . lines) <$> readFile "test/puzzle19Data.txt"
            let poss = findPositions puzzle 
            poss `shouldBe` 
                [((0,20),((-1145,-57,139),[[0,1,0],[0,0,-1],[-1,0,0]]))
                ,((0,29),((-1,-1142,56),[[0,0,1],[1,0,0],[0,1,0]]))
                ,((1,3),((-1207,13,-27),[[0,-1,0],[0,0,1],[-1,0,0]]))
                ,((1,8),((-4,-30,-1158),[[1,0,0],[0,-1,0],[0,0,-1]]))
                ,((1,31),((3,1175,-32),[[0,0,1],[1,0,0],[0,1,0]]))
                ,((2,4),((-88,-1235,10),[[1,0,0],[0,0,1],[0,-1,0]]))
                ,((3,1),((13,27,-1207),[[0,0,-1],[-1,0,0],[0,1,0]]))
                ,((3,13),((15,1095,-53),[[0,0,1],[-1,0,0],[0,-1,0]]))
                ,((3,18),((-1124,-15,-116),[[0,-1,0],[0,0,1],[-1,0,0]]))
                ,((3,26),((98,-77,1140),[[0,0,-1],[1,0,0],[0,-1,0]]))
                ,((4,2),((88,-10,-1235),[[1,0,0],[0,0,-1],[0,1,0]]))
                ,((4,33),((1156,-16,14),[[0,0,1],[-1,0,0],[0,-1,0]]))
                ,((5,8),((-1108,123,48),[[0,-1,0],[-1,0,0],[0,0,-1]]))
                ,((5,19),((-20,-1237,-115),[[0,1,0],[-1,0,0],[0,0,1]]))
                ,((5,31),((97,116,1174),[[0,0,1],[0,-1,0],[1,0,0]]))
                ,((6,7),((180,1223,-38),[[0,0,-1],[1,0,0],[0,-1,0]]))
                ,((6,22),((141,67,-1102),[[0,0,1],[0,-1,0],[1,0,0]]))
                ,((7,6),((-38,-180,1223),[[0,1,0],[0,0,-1],[-1,0,0]]))
                ,((7,19),((30,1022,119),[[0,1,0],[1,0,0],[0,0,-1]]))
                ,((7,27),((1057,-158,149),[[0,0,1],[0,-1,0],[1,0,0]]))
                ,((7,30),((-84,-146,-1122),[[0,-1,0],[0,0,1],[-1,0,0]]))
                ,((8,1),((4,-30,-1158),[[1,0,0],[0,-1,0],[0,0,-1]]))
                ,((8,5),((123,-1108,48),[[0,-1,0],[-1,0,0],[0,0,-1]]))
                ,((9,32),((97,144,-1225),[[-1,0,0],[0,1,0],[0,0,-1]]))
                ,((10,24),((-78,-27,-1119),[[0,-1,0],[-1,0,0],[0,0,-1]]))
                ,((11,23),((39,1063,117),[[0,1,0],[-1,0,0],[0,0,1]]))
                ,((11,30),((64,-1236,82),[[0,1,0],[-1,0,0],[0,0,1]]))
                ,((12,33),((1175,58,54),[[0,0,1],[1,0,0],[0,1,0]]))
                ,((13,3),((53,15,1095),[[0,-1,0],[0,0,-1],[1,0,0]]))
                ,((13,15),((1125,-55,-165),[[0,0,1],[-1,0,0],[0,-1,0]]))
                ,((14,22),((98,112,1190),[[1,0,0],[0,-1,0],[0,0,-1]]))
                ,((15,13),((165,1125,-55),[[0,-1,0],[0,0,-1],[1,0,0]]))
                ,((15,26),((1337,-68,28),[[0,1,0],[0,0,1],[1,0,0]]))
                ,((16,22),((-1335,-21,-25),[[0,-1,0],[1,0,0],[0,0,1]]))
                ,((16,28),((41,-33,-1364),[[0,0,-1],[-1,0,0],[0,1,0]]))
                ,((18,3),((-15,116,-1124),[[0,0,-1],[-1,0,0],[0,1,0]]))
                ,((19,5),((1237,-20,115),[[0,-1,0],[1,0,0],[0,0,1]]))
                ,((19,7),((-1022,-30,119),[[0,1,0],[1,0,0],[0,0,-1]]))
                ,((19,33),((66,-1387,-1),[[-1,0,0],[0,0,-1],[0,-1,0]]))
                ,((20,0),((57,139,-1145),[[0,0,-1],[1,0,0],[0,-1,0]]))
                ,((20,24),((103,1269,98),[[0,0,1],[0,1,0],[-1,0,0]]))
                ,((21,27),((113,126,1232),[[0,0,1],[0,1,0],[-1,0,0]]))
                ,((21,30),((1254,114,-39),[[0,1,0],[0,0,1],[1,0,0]]))
                ,((22,6),((1102,67,-141),[[0,0,1],[0,-1,0],[1,0,0]]))
                ,((22,14),((-98,112,1190),[[1,0,0],[0,-1,0],[0,0,-1]]))
                ,((22,16),((-21,1335,25),[[0,1,0],[-1,0,0],[0,0,1]]))
                ,((22,27),((7,-1007,-119),[[0,1,0],[0,0,-1],[-1,0,0]]))
                ,((22,32),((-1360,151,16),[[1,0,0],[0,1,0],[0,0,1]]))
                ,((23,11),((-1063,39,-117),[[0,-1,0],[1,0,0],[0,0,1]]))
                ,((23,24),((-52,-84,-1258),[[-1,0,0],[0,0,1],[0,1,0]]))
                ,((24,10),((-27,-78,-1119),[[0,-1,0],[-1,0,0],[0,0,-1]]))
                ,((24,20),((-98,-1269,103),[[0,0,-1],[0,1,0],[1,0,0]]))
                ,((24,23),((-52,1258,84),[[-1,0,0],[0,0,1],[0,1,0]]))
                ,((25,30),((1215,27,-10),[[0,1,0],[1,0,0],[0,0,-1]]))
                ,((26,3),((1140,-98,-77),[[0,1,0],[0,0,-1],[-1,0,0]]))
                ,((26,15),((68,-28,-1337),[[0,0,1],[1,0,0],[0,1,0]]))
                ,((27,7),((-149,-158,-1057),[[0,0,1],[0,-1,0],[1,0,0]]))
                ,((27,21),((-1232,-126,113),[[0,0,-1],[0,1,0],[1,0,0]]))
                ,((27,22),((1007,-119,7),[[0,0,-1],[1,0,0],[0,-1,0]]))
                ,((28,16),((-1364,41,33),[[0,-1,0],[0,0,1],[-1,0,0]]))
                ,((29,0),((-56,1,1142),[[0,1,0],[0,0,1],[1,0,0]]))
                ,((30,7),((-146,1122,-84),[[0,0,-1],[-1,0,0],[0,1,0]]))
                ,((30,11),((1236,64,-82),[[0,-1,0],[1,0,0],[0,0,1]]))
                ,((30,21),((-114,39,-1254),[[0,0,1],[1,0,0],[0,1,0]]))
                ,((30,25),((-27,-1215,-10),[[0,1,0],[1,0,0],[0,0,-1]]))
                ,((31,1),((32,-3,-1175),[[0,1,0],[0,0,1],[1,0,0]]))
                ,((31,5),((-1174,116,-97),[[0,0,1],[0,-1,0],[1,0,0]]))
                ,((32,9),((97,-144,-1225),[[-1,0,0],[0,1,0],[0,0,-1]]))
                ,((32,22),((1360,-151,-16),[[1,0,0],[0,1,0],[0,0,1]]))
                ,((33,4),((-14,1156,-16),[[0,-1,0],[0,0,-1],[1,0,0]]))
                ,((33,12),((-54,-1175,-58),[[0,1,0],[0,0,1],[1,0,0]]))
                ,((33,19),((66,-1,-1387),[[-1,0,0],[0,0,-1],[0,-1,0]]))]
            nub (sort (map (snd.fst) poss)) `shouldBe` [0..33] 

    describe "acquire" $ do
        it "converts all the points of a scanner to a scanner within range" $ do
            sample <- (readScanners . lines) <$> readFile "test/Sample19Data.txt"
            let cs = acquire (sample!!0) (sample!!1)
            length cs `shouldBe` length (sample!!0) + length (sample!!1) - length (intersection (sample!!0) (sample!!1))

